"Business info"
type Business {
  "Business id"
  _id: ID
  "Business name"
  name: String
}

type Channel {
  "Channel Id"
  id: String
  "Version software"
  v: String
  "Version configuration"
  c: String
}

type Event {
  "Event Id"
  id: String!
  "Event type"
  type: String!
  "Event user"
  user: String!
}

"Accumulated transaction info"
type AccumulatedTransaction {
  "Accumulated transaction id"
  _id: ID!
  "From business"
  fromBu: String!
  fromBusinessName: String
  "To business"
  toBu: String!
  toBusinessName: String
  "Timestamp"
  timestamp: BigInt
  "Ids of the involved transactions"
  transactionIds: [GroupedTransactions]!
  "Amount"
  amount: Float!
}

type GroupedTransactions {
  "Transaction type"
  type: String!
  "Transactions ids"
  ids: [String]
}

"Clearing info"
type Clearing {
  "Clearing id"
  _id: ID
  "Clearing creation timestmap"
  timestamp: BigInt
  "Last update timestmap"
  lastUpdateTimestamp: BigInt
  businessId: String!
  businessName: String
  input: [Movement]
  output: [Movement]
  partialSettlement: PartialSettlement
  accumulatedTransactionIds: [String]!
  open: Boolean
}

"Money movement"
type Movement {
  "Business ID involved in the movement"
  businessId: String!
  "Business name involved in the movement"
  businessName: String
  "Movement amount"
  amount: Float!
}

"Money movement"
type SettlementMovement {
  "Business ID involved in the movement"
  businessId: String!
  "Business name involved in the movement"
  businessName: String
  "Movement amount"
  amount: Float!
  "Settlement ID"
  settlementId: String!
}

"Partial settlement"
type PartialSettlement {
  input: [SettlementMovement]
  output: [SettlementMovement]
}

"Transaction info"
type Transaction {
  "Transaction id"
  _id: ID!
  "Transaction amount"
  amount: Float!
  "From business"
  fromBu: String!
  fromBusinessName: String
  "To business"
  toBu: String!
  toBusinessName: String
  "Timestamp"
  timestamp: BigInt
  "Transaction type"
  type: String!
  "Channel"
  channel: Channel!
  "Event"
  evt: Event!
}

"Settlement info"
type Settlement {
  "Settlement id"
  _id: ID!
  "Settlement amount"
  amount: Float!
  "From business"
  fromBu: String!
  "From business name"
  fromBusinessName: String
  "From business state"
  fromBusinessState: SettlementState
  "To business"
  toBu: String!
  "To business name"
  toBusinessName: String
  "To business state"
  toBusinessState: SettlementState
  "Timestamp"
  timestamp: BigInt
  "Clearing ID"
  clearingId: String!
}

"Error info"
type Error {
  "Error ID"
  _id: ID!
  "Timestamp"
  timestamp: BigInt
  "Error"
  error: String!
  "Event"
  event: String!
}

"Settlement states"
enum SettlementState {
  TO_PAY
  PAID_OUT
}

type CommandResponse {
  "Response code"
  code: Int
  "Response message"
  message: String
}

"Hello world sample, please remove"
type HelloWorldACSS {
  "text"
  sn: String!  
}

type Query {
  "Get business"
  getACSSBusiness: Business
  "Get businesses"
  getACSSBusinesses: [Business]
  "Get business by id"
  getBusinessById(id: ID!): Business
  "Gets the clearings from a business. the value businessId is taken into account if and only if the user has the role SYSADMIN, If a business is not specified, this will return the clearings associated with the business of the user that is performing the request "
  getAllClearingsFromBusiness(page: Int!, count: Int!, businessId: String): [Clearing]
  "Gets the clearing with the indicated ID"
  getClearingById(id: ID!): Clearing
  "Gets the accumulated transactions by ids"
  getAccumulatedTransactionsByIds(page: Int!, count: Int!, ids: [ID!]): [AccumulatedTransaction]
  "Gets transactions by ids"
  getTransactionsByIds(page: Int!, count: Int!, filterType: String, ids: [ID!]): [Transaction]
  "Gets settlements associated with the specified clearing ID"
  getSettlementsByClearingId(page: Int!, count: Int!, clearingId: String!): [Settlement]
  "Gets the amount of settlements associated with the specified clearing ID"
  getSettlementsCountByClearingId(clearingId: String!): Int!
  "Gets settlements associated with the specified business ID"
  getSettlementsByBusinessId(page: Int!, count: Int!, businessId: String!): [Settlement]
  "Gets the amount of settlements associated with the specified business ID"
  getSettlementsCountByBusinessId(businessId: String!): Int!
  "Gets errors ocurred during generation of accumulated transactions"
  getAccumulatedTransactionErrors(page: Int!, count: Int!): [Error]
  "Gets amount of errors ocurred during generation of accumulated transactions"
  getAccumulatedTransactionErrorsCount: Int!
  "Gets errors ocurred during generation or update of clearing"
  getClearingErrors(page: Int!, count: Int!): [Error]
  "Gets amount of errors ocurred during generation or update of clearing"
  getClearingErrorsCount: Int!
}

type Mutation {
  "change settlement state"
  changeSettlementState(settlementId: ID!,settlementState: SettlementState!): CommandResponse
}

type Subscription {
  "Hello world sample, please remove"
  ACSSHelloWorldSubscription: HelloWorldACSS  
}